// Generated by CoffeeScript 1.10.0
var $, Backbone, Data, _, config, facetMap, persons, searchView, texts, users,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Backbone = require('backbone');

$ = require('jquery');

_ = require("underscore");

searchView = require("../views/search");

persons = require("../collections/persons");

texts = require("../collections/texts");

users = require("../collections/users");

config = require('./config');

facetMap = {
  "facet_s_person_role": "role",
  "facet_s_codex_origin_place": "originPlaces",
  "facet_s_codex_origin_region": "originRegions",
  "facet_s_codex_origin_scriptorium": "originScriptorium",
  "facet_s_codex_provenance_place": "provenancePlaces",
  "facet_s_codex_provenance_region": "provenanceRegions",
  "facet_s_codex_provenance_scriptorium": "provenanceScriptorium",
  "facet_s_codex_place_of_preservation": "locations",
  "facet_s_codex_script_type": "codexScriptType",
  "facet_s_margin_script_type": "marginScriptType",
  "facet_s_text_period": "textPeriod",
  "facet_s_margin_language": "languages",
  "facet_s_margin_phenomenon": "phenomenaType",
  "facet_s_marg_phenomena_quant": "phenomenaQuantification",
  "facet_s_marg_typology": "typologyType",
  "facet_s_marg_typology_quant": "typologyQuantification",
  "facet_s_text_state": "preservationState",
  "facet_s_identifiers": "identifiers",
  "facet_s_person_name": "personName",
  "facet_s_region": "regions",
  "facet_s_text_type": "textContentType"
};

Data = (function(superClass) {
  extend(Data, superClass);

  function Data() {
    return Data.__super__.constructor.apply(this, arguments);
  }

  Data.prototype.defaults = function() {
    return {
      facetData: null,
      persons: null,
      texts: null,
      users: null
    };
  };

  Data.prototype.initialize = function() {
    return this.listenToOnce(searchView.facetedSearch, "change:results", (function(_this) {
      return function(searchResult) {
        var displayName, facet, facetData, i, len, optionList, ref;
        facetData = {};
        ref = searchResult.get('facets');
        for (i = 0, len = ref.length; i < len; i++) {
          facet = ref[i];
          if (facetMap.hasOwnProperty(facet.name)) {
            displayName = facetMap[facet.name];
            optionList = facet.options.map(function(options) {
              return options.name;
            });
            facetData[displayName] = optionList;
          }
        }
        return _this.set({
          facetData: facetData
        });
      };
    })(this));
  };

  Data.prototype.fetch = function(done) {
    var jqXHRPersons, jqXHRTexts, jqXHRUsers;
    jqXHRPersons = $.getJSON(config.get("personsUrl"));
    jqXHRTexts = $.getJSON(config.get("textsUrl"));
    jqXHRUsers = $.getJSON(config.get("usersUrl"));
    return $.when(jqXHRPersons, jqXHRTexts, jqXHRUsers).done((function(_this) {
      return function(personsArgs, textsArgs, usersArgs) {
        persons.reset(personsArgs[0], {
          parse: true
        });
        texts.reset(textsArgs[0], {
          parse: true
        });
        users.reset(usersArgs[0]);
        _this.set({
          persons: persons,
          texts: texts
        });
        return done();
      };
    })(this));
  };

  Data.prototype._handleLocalities = function(data) {
    var i, j, k, len, len1, len2, place, places, ref, ref1, ref2, region, regions, scriptoria, scriptorium;
    regions = [];
    places = [];
    scriptoria = [];
    ref = data.regions;
    for (i = 0, len = ref.length; i < len; i++) {
      region = ref[i];
      regions.push(region.name);
      ref1 = region.places;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        place = ref1[j];
        places.push(place.name);
        ref2 = place.scriptoria;
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          scriptorium = ref2[k];
          scriptoria.push(scriptorium.name);
        }
      }
    }
    return {
      data: data.regions,
      regions: _.sortBy(regions, _.identity),
      places: _.sortBy(places, _.identity),
      scriptoria: _.sortBy(scriptoria, _.identity)
    };
  };

  return Data;

})(Backbone.Model);

module.exports = new Data();
