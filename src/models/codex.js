// Generated by CoffeeScript 1.10.0
var Backbone, Codex, LoginComponent, config,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Backbone = require("backbone");

LoginComponent = require("hibb-login");

config = require("./config");

Codex = (function(superClass) {
  extend(Codex, superClass);

  function Codex() {
    return Codex.__super__.constructor.apply(this, arguments);
  }

  Codex.prototype.idAttribute = "pid";

  Codex.prototype.defaults = function() {
    return {
      identifiers: [],
      textUnits: [],
      marginUnits: [],
      script: {},
      URLs: [],
      bibliographies: [],
      pageLayouts: [],
      provenances: [],
      marginalQuantities: [],
      layoutRemarks: "",
      quireStructure: ""
    };
  };

  Codex.prototype.url = function() {
    return config.get('backendUrl') + ("codex/" + this.id);
  };

  Codex.prototype.getUserEmail = function() {
    return console.error("NOT IMPLEMENTED");
  };

  Codex.prototype.sync = function(method, model, options) {
    var loc, origin;
    options.beforeSend = function(xhr) {
      if (LoginComponent.getUser().isLoggedIn()) {
        xhr.setRequestHeader('Authorization', LoginComponent.getUser().getToken());
      }
      return xhr.setRequestHeader('Accept', "application/json");
    };
    if (method === 'read') {
      options.url = model.url() + "/expandlinks";
    } else if (method === 'update') {
      model = model.clone();
      model.set("textUnits", model.get("textUnits").map(function(textUnit) {
        textUnit["^text"] = "/texts/" + textUnit.text.pid;
        delete textUnit.text;
        return textUnit;
      }));
      origin = model.get("origin");
      loc = origin.locality;
      origin["^locality"] = [this._slug(loc.region), this._slug(loc.place), this._slug(loc.scriptorium)].join("-");
      delete origin.locality;
      model.set("origin", origin);
      model.set("userRemarks", model.get("userRemarks").map(function(userRemark) {
        userRemark["^user"] = "/users/" + userRemark.user.id;
        delete userRemark.user;
        return userRemark;
      }));
      model.set("provenances", model.get("provenances").map((function(_this) {
        return function(provenance) {
          loc = provenance.locality;
          provenance["^locality"] = [_this._slug(loc.region), _this._slug(loc.place), _this._slug(loc.scriptorium)].join("-");
          delete provenance.locality;
          return provenance;
        };
      })(this)));
      model.set("marginUnits", model.get("marginUnits").map((function(_this) {
        return function(marginUnit) {
          var annotator, i, j, len, len1, ref, ref1;
          ref = marginUnit.origins;
          for (i = 0, len = ref.length; i < len; i++) {
            origin = ref[i];
            _this._replaceLocality(origin);
          }
          ref1 = marginUnit.annotators;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            annotator = ref1[j];
            _this._replacePerson(annotator);
          }
          return marginUnit;
        };
      })(this)));
      model.set("patrons", model.get("patrons").map((function(_this) {
        return function(patron) {
          return _this._replacePerson(patron);
        };
      })(this)));
    }
    return Codex.__super__.sync.apply(this, arguments);
  };

  Codex.prototype._replaceUser = function(obj) {
    obj["^user"] = "/users/" + obj.user.id;
    delete obj.user;
    return obj;
  };

  Codex.prototype._replacePerson = function(obj) {
    obj["^person"] = "/persons/" + obj.person.pid;
    delete obj.person;
    return obj;
  };

  Codex.prototype._replaceLocality = function(obj) {
    obj["^locality"] = [this._slug(obj.locality.region), this._slug(obj.locality.place), this._slug(obj.locality.scriptorium)].join("-");
    delete obj.locality;
    return obj;
  };

  Codex.prototype._slug = function(value) {
    value = value.toLowerCase();
    value = value.replace(" ", "");
    value = value.replace("(", "");
    value = value.replace(")", "");
    value = value.replace(".", "");
    value = value.replace("-", "");
    return value;
  };

  return Codex;

})(Backbone.Model);

module.exports = Codex;
