// Generated by CoffeeScript 1.10.0
var BaseCollection, BaseModel, Text, _, config,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require("underscore");

BaseCollection = require("../collections/base");

BaseModel = require('./base');

config = require("./config");

Text = (function(superClass) {
  extend(Text, superClass);

  function Text() {
    return Text.__super__.constructor.apply(this, arguments);
  }

  Text.prototype.idAttribute = "pid";

  Text.prototype.url = function() {
    return (config.get("fullTextUrl")) + "/" + this.id;
  };

  Text.prototype.defaults = function() {
    return {
      title: "",
      period: "",
      contentTypes: [],
      authors: []
    };
  };

  Text.prototype.set = function(attrs, options) {
    var ref, ref1;
    ref = this.setter(attrs, options, 'authors', function(val) {
      if (val.hasOwnProperty("selected")) {
        return val.selected;
      } else {
        return val;
      }
    }), attrs = ref[0], options = ref[1];
    ref1 = this.setter(attrs, options, 'contentTypes', function(val) {
      if (val.hasOwnProperty("selected")) {
        return val.selected.map(function(s) {
          return s.id;
        });
      } else {
        return val;
      }
    }), attrs = ref1[0], options = ref1[1];
    return Text.__super__.set.apply(this, arguments);
  };

  Text.prototype.parse = function(attrs, options) {
    if (attrs != null ? attrs.hasOwnProperty("authors") : void 0) {
      attrs.authors = new BaseCollection(attrs.authors.map(function(author) {
        return {
          id: author.person.pid,
          title: author.person.name
        };
      }));
    }
    return attrs;
  };

  Text.prototype.sync = function(method, model, options) {
    if (method === "read") {
      options.url = this.url() + "/expandlinks";
    }
    if (method === "update") {
      model = model.clone();
      model.set("authors", model.get("authors").map(function(author) {
        var id;
        id = author.hasOwnProperty("pid") ? author.pid : author.id;
        return {
          "^person": "/persons/" + id
        };
      }));
      if (model.get("period").hasOwnProperty("title")) {
        model.set("period", model.get("period").title);
      }
    }
    return Text.__super__.sync.apply(this, arguments);
  };

  return Text;

})(BaseModel);

module.exports = Text;
