// Generated by CoffeeScript 1.10.0
var Backbone, Base, LoginComponent,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Backbone = require('backbone');

LoginComponent = require("hibb-login");

Base = (function(superClass) {
  extend(Base, superClass);

  function Base() {
    return Base.__super__.constructor.apply(this, arguments);
  }


  /*
  	 * Helper function to override the setting of an attribute in @set
  	 * @set can take a key-value pair as attrs=key, options=value or attrs={key:value}, options={}
  	 * setter changes the attrs and options (and returns them) according to what key-value pair "system" is given
  	 *
  	 * @param attrs String or Object the original attrs passed to @set
  	 * @param options String or Object the original options passed to @set
  	 * @param attr String the attribute which value to change
  	 * @param alterValue Function alters the value of attr, takes value (attrs[attr] or options) as param and returns the new val
  	 *
  	 * @returns Array containing attrs and options
   */

  Base.prototype.setter = function(attrs, options, attr, alterValue) {
    if (attrs.hasOwnProperty(attr)) {
      attrs[attr] = alterValue(attrs[attr]);
    }
    if (attrs === attr) {
      options = alterValue(options);
    }
    return [attrs, options];
  };

  Base.prototype.sync = function(method, model, options) {
    if (method === "update") {
      options.beforeSend = function(xhr) {
        if (LoginComponent.getUser().isLoggedIn()) {
          xhr.setRequestHeader('Authorization', LoginComponent.getUser().getToken());
        }
        return xhr.setRequestHeader('Accept', "application/json");
      };
    }
    return Base.__super__.sync.apply(this, arguments);
  };

  return Base;

})(Backbone.Model);

module.exports = Base;
