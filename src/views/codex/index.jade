//- TODO check margin unit ==> annotators

include ../../../node_modules/hi-svg-icons/search.jade
include ../../../node_modules/hi-svg-icons/edit.jade

mixin locality(region, place, scriptorium)
	ul.locality
		if scriptorium != "(empty)"
			li.scriptorium(title="scriptorium")= scriptorium
		if place != "(empty)"
			li.place(title="place")= place
		if region != "(empty)"
			li.region(title="region")= region

mixin labelLocality(locality, certain)
	li
		label Locality
		span
			+locality(locality.region, locality.place, locality.scriptorium)

			if certain
				span.certainty(title="Uncertain") ?

mixin labelValue(label, value)
	if value
		li
			label= label
			span= value

mixin labelValueOrDash(label, value)
	li
		label= label
		span= value || "-"

- var identifiers = codex.get("identifiers").map(function(identifier) { return identifier.type + ": " + identifier.identifier});

.pagination

.search-icon-container
	+search-icon

h2= codex.get('name')
	if user.isLoggedIn()
		+edit-icon

ul.tabs
	li.tab(data-tab="metadata").active
		button Codex Unit
	li.tab(data-tab="textual-units")
		button Text Unit
			small
				for dot in codex.get('textUnits')
					span &#8226;
	li.tab(data-tab="marginal-units")
		button Margin Unit
			small
				for dot in codex.get('marginUnits')
					span &#8226;
	li.tab(data-tab="raw")
		button Raw Data
	li.metadata
		ul.metadata
			li.identifiers= identifiers.join("; ")
			li.created
				label Created by #{codex.get('creator')}
				span #{codex.get('creationDate')}
			li.changed
				label Changed by #{codex.get('modifier')}:
				span #{codex.get('modificationDate')}

.tab-container
	.tab.metadata.active
		ul.data
			+labelValue("Date", codex.get("date"))
			+labelValue("Date and locale remarks", codex.get('dateAndLocaleRemarks'))

			//- li
			//- 	label Persons
			//- 	span= codex.get('name')

		h3
			div Localisation

		h4 Origin
		ul.origin
			ul
				+labelLocality(codex.get("origin").locality, codex.get("origin").certain)
				+labelValue("Remarks", codex.get("origin").remarks)

		if codex.get('provenances').length > 0
			h4 Provenance(s)
			ul.provenances
				for provenance in codex.get('provenances')
					li.provenance
						ul
							+labelLocality(provenance.locality, provenance.certain)
							+labelValue("Remarks", provenance.remarks)
							+labelValue("Date", provenance.date)
							+labelValue("Date Info", provenance.dateInfo)

		h3
			div Physical appearance
		ul.data
			- var pageDimensions = codex.get('pageDimension_height') + " x " + codex.get('pageDimension_width') + " mm";
			+labelValue("Page Dimensions", pageDimensions)
			+labelValue("Number of Pages", codex.get("folia"))
			+labelValue("Quire Structure", codex.get('quireStructure'))

		if codex.get('pageLayouts').length > 0 || codex.get('layoutRemarks').length > 0
			h4 Layout(s)
			if codex.get('layoutRemarks').length > 0
				ul.data
					+labelValue("Remarks", codex.get('layoutRemarks'))
			if codex.get('pageLayouts').length > 0
				ul.layouts
					for layout in codex.get('pageLayouts')
						- var ratioHeightMin = Math.round((layout.textHeightMin / codex.get('pageDimension_height')) * 100)
						- var ratioHeightMax = Math.round((layout.textHeightMax / codex.get('pageDimension_height')) * 100)
						- var ratioWidthMin = Math.round((layout.textWidthMin / codex.get("pageDimension_width")) * 100)
						- var ratioWidthMax = Math.round((layout.textWidthMax / codex.get("pageDimension_width")) * 100)
						- var ratioHeight = (ratioHeightMin !== ratioHeightMax && ratioHeightMax !== 0) ? (ratioHeightMin + "-" + ratioHeightMax + "%") : ratioHeightMin+"%"
						- var ratioWidth = (ratioWidthMin !== ratioWidthMax && ratioWidthMax !== 0) ? (ratioWidthMin + "-" + ratioWidthMax + "%") : ratioWidthMin+"%"

						- var lines = (layout.linesMax > 0 && layout.linesMin !== layout.linesMax) ? layout.linesMin + " to " + layout.linesMax : layout.linesMin;
						- lines = lines + " lines";
						- lines = (layout.lineHeight > 0) ? lines + " of " + layout.lineHeight + " mm height" : lines

						- var blockSizeHeight = (layout.textHeightMax > 0 && layout.textHeightMin !== layout.textHeightMax) ? layout.textHeightMin + " - " + layout.textHeightMax : layout.textHeightMin
						- var blockSizeWidth = (layout.textWidthMax > 0 && layout.textWidthMin !== layout.textWidthMax) ? layout.textWidthMin + " - " + layout.textWidthMax : layout.textWidthMin
						- var blockSize = blockSizeHeight + " x " + blockSizeWidth

						- var marginRatioHeightMin = 100 - ratioHeightMin
						- var marginRatioHeightMax = (ratioHeightMax > 0) ? 100 - ratioHeightMax : 0
						- var marginRatioWidthMin = 100 - ratioWidthMin
						- var marginRatioWidthMax = (ratioWidthMax > 0) ? 100 - ratioWidthMax: 0
						- var marginRatioHeight = (marginRatioHeightMin !== marginRatioHeightMax && marginRatioHeightMax !== 0) ? (marginRatioHeightMin + "-" + marginRatioHeightMax + "%") : marginRatioHeightMin+"%"
						- var marginRatioWidth = (marginRatioWidthMin !== marginRatioWidthMax && marginRatioWidthMax !== 0) ? (marginRatioWidthMin + "-" + marginRatioWidthMax + "%") : marginRatioWidthMin+"%"


						li
							ul
								li= lines
								if layout.foliaCount > 0
									li #{layout.foliaCount} pages: #{layout.pages}
								li Text block size: #{blockSize}
								li Text block ratio: #{ratioHeight} x #{ratioWidth}
								li Margin ratio: #{marginRatioHeight} x #{marginRatioWidth}
								li.canvas
									canvas


		h3
			div Script
		- var script = codex.get('script');
		ul.script
			+labelValue("Type", script.types)
			+labelValue("Characteristics", script.characteristics)
			+labelValue("Hand count", script.handsCount)
			+labelValue("Scribe", script.scribeRemarks)

		h3
			div Content description
		div.summary= codex.get('contentSummary')

		h3
			div Marginal Activity Summary
		div.summary= codex.get('marginalsSummary')


		if codex.get('marginalQuantities').length > 0
			h3
				div Quantative Analysis
			- var mq = codex.get('marginalQuantities')[0]
			ul.quantative-analysis
				li Annotated pages (in first part of ms): #{Math.round(mq.firstPagesWithMarginals/mq.firstPagesConsidered*100)}% (#{mq.firstPagesWithMarginals} out of first #{mq.firstPagesConsidered})
				li Non-annotated pages (in whole ms): #{Math.round(mq.totalBlankPages/codex.get('folia')*100)}% (#{mq.totalBlankPages} out of #{codex.get('folia')})
				li Most filled margin with annotations: #{mq.mostFilledPagePctage}% (#{mq.mostFilledPageDesignation})

		if codex.get('bibliographies').length > 0
			h3
				div Bibliography
			ul.bibliographies
				for bibliopgraphy in codex.get('bibliographies')
					li= bibliopgraphy

		if codex.get('URLs').length > 0
			h3
				div URL(s)
			ul.urls
				for url in codex.get('URLs')
					li
						a(href=url, data-bypass, target="_blank")= url


	.tab.textual-units
		ol
			for textUnit in codex.get('textUnits')
				- var authors = textUnit.text.authors.map(function (author) { return author.person.name; }).join(", ");

				li
					ul
						+labelValueOrDash("Title", textUnit.text.title)
						+labelValueOrDash("Title in codex", textUnit.titleincodex)
						+labelValueOrDash("Incipit", textUnit.incipit)
						+labelValueOrDash("Explicit", textUnit.explicit)
						+labelValueOrDash("Page range", textUnit.pages)
						+labelValueOrDash("Author(s)", authors)
						+labelValueOrDash("Period", textUnit.text.period)
						+labelValueOrDash("Language", textUnit.text.language)
						+labelValueOrDash("Genre", textUnit.contentTypes)
						+labelValueOrDash("State of preservation", textUnit.stateOfPreservation)

	.tab.marginal-units
		ol
			for marginUnit, index in codex.get('marginUnits')
				li
					ul
						+labelValueOrDash("Date", marginUnit.date)
						+labelValueOrDash("Relative date", marginUnit.relativeDate)
						+labelValueOrDash("Languages", marginUnit.languages)
						+labelValueOrDash("Scripts", marginUnit.scripts)
						+labelValueOrDash("Hands", marginUnit.hands)
						li
							label Annotators
							if marginUnit.annotators.length > 0
								ul.origin
									for annotator in marginUnit.annotators
										li
											ul
												+labelValueOrDash("Name", annotator.name)
												+labelValueOrDash("Role", annotator.role)
												+labelValueOrDash("Birthdate", annotator.birthDate)
												+labelValueOrDash("Deathdate", annotator.deathDate)
							else
								span -

						+labelValueOrDash("Script types", marginUnit.scriptTypes.join(", "))
						+labelValueOrDash("Script remarks", marginUnit.scriptRemarks)
						li
							label Origin
								ul.origin
									- var locality = marginUnit.origin.locality.region + ", " + marginUnit.origin.locality.place + ", " + marginUnit.origin.locality.scriptorium;
									+labelValueOrDash("Locality", locality)
									+labelValueOrDash("Remarks", marginUnit.origin.remarks)
									+labelValueOrDash("Certain", marginUnit.origin.certain)
						li
							label Annotation type
							if marginUnit.marginTypes.length > 0
								ul.type
									for mt in marginUnit.marginTypes
										li
											ul
												+labelValueOrDash("Type", mt.type)
												+labelValueOrDash("Quantification", mt.quantification)
												+labelValueOrDash("Remarks", mt.remarks)
							else
								span -
						+labelValueOrDash("Annotation type remarks", marginUnit.typologyRemarks)
						li
							label Specific phenomena
							if marginUnit.specificPhenomena.length > 0
								ul.specific-phenomena
									for sp in marginUnit.specificPhenomena
										li
											ul
												+labelValueOrDash("Type", sp.type)
												+labelValueOrDash("Quantification", sp.quantification)
												+labelValueOrDash("Remarks", sp.remarks)
							else
								span -
						+labelValueOrDash("General remarks on function and form", marginUnit.generalObservations)
						if marginUnit.bibliographies.length > 0
							label Bibliography
							ul.bibliographies
								for bibliopgraphy in marginUnit.bibliographies
									li= bibliopgraphy

	.tab.raw
		pre= JSON.stringify(codex.attributes, null, 4)

aside
	img