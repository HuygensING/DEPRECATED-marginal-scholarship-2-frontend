include ../../../node_modules/hi-svg-icons/search.jade
include ../../../node_modules/hi-svg-icons/edit.jade

mixin locality(region, place, scriptorium)
	ul.locality
		if scriptorium != "(empty)"
			li.scriptorium(title="scriptorium")= scriptorium
		if place != "(empty)"
			li.place(title="place")= place
		if region != "(empty)"
			li.region(title="region")= region

mixin labelLocality(locality)
	li
		label Locality
		span
			+locality(locality.region, locality.place, locality.scriptorium)

mixin labelValue(label, value)
	if value
		li
			label= label
			span= value

mixin labelValueOrDash(label, value)
	li
		label= label
		span= value || "-"


- var ids = [140, 141, 144, 145, 146, 147, 148, 149, 150, 201, 203]
- var file = "COD" + ids[Math.floor(Math.random() * ids.length)] + ".jpg"
- var src = facsimileUrl+file;
- var identifiers = codex.get("identifiers").map(function(identifier) { return identifier.type + ": " + identifier.identifier});

.pagination

.search-icon-container
	+search-icon


h2= codex.get('name')
	+edit-icon

ul.tabs
	li.tab(data-tab="metadata").active 
		button Codex Unit
	li.tab(data-tab="textual-units")
		button Text Unit
			small
				for dot in codex.get('textUnits')
					span &#8226;
	li.tab(data-tab="marginal-units")
		button Margin Unit
			small
				for dot in codex.get('marginUnits')
					span &#8226;
	li.tab(data-tab="raw")
		button Raw Data

.tab-container
	.tab.metadata.active
		ul.data
			li 
				label Created
				span #{codex.get('creationDate')} by #{codex.get('creator')}
			li 
				label Changed
				span #{codex.get('modificationDate')} by #{codex.get('modifier')}

			+labelValue("Identifier(s)", identifiers.join("; "))
			+labelValue("Content Summary", codex.get('contentSummary'))
			+labelValue("Marginal Activity Summary", codex.get('marginalsSummary'))
			+labelValue("Date", codex.get("date"))
			+labelValue("Remarks", codex.get('dateAndLocaleRemarks'))
			
			//- li
			//- 	label Persons
			//- 	span= codex.get('name')
		
		h3 Localisation

		h4 Origin
		ul.origin
			ul
				+labelLocality(codex.get("origin").locality)
				+labelValue("Remarks", codex.get("origin").remarks)
				+labelValue("Certain", codex.get("origin").certain)

		if codex.get('provenances').length > 0
			h4 Provenance(s)
			ul.provenances
				for provenance in codex.get('provenances')
					li.provenance
						ul
							+labelLocality(provenance.locality)
							+labelValue("Remarks", provenance.remarks)
							+labelValue("Date", provenance.date)
							+labelValue("Date Info", provenance.dateInfo)
							+labelValue("Certain", provenance.certain)

		h3 Physical appearance
		ul.data
			- var pageDimensions = codex.get('pageDimension_height') + " x " + codex.get('pageDimension_width') + " mm";
			+labelValue("Page Dimensions", pageDimensions)
			+labelValue("Number of Pages", codex.get("folia"))
			+labelValue("Quire Structure", codex.get('quireStructure'))
			+labelValue("Layout Remarks", codex.get('layoutRemarks'))

		if codex.get('marginalQuantities').length > 0
			h4 Quantative Analysis
			- var mq = codex.get('marginalQuantities')[0]
			ul
				li Number of pages with marginalia = #{Math.round(mq.firstPagesWithMarginals/mq.firstPagesConsidered*100)}% (#{mq.firstPagesWithMarginals} out of first #{mq.firstPagesConsidered})
				li Number of blank pages: #{Math.round(mq.totalBlankPages/codex.get('folia')*100)}% (#{mq.totalBlankPages} out of #{codex.get('folia')})
				li Most filled page: #{mq.mostFilledPagePctage}% (#{mq.mostFilledPageDesignation})

		if codex.get('pageLayouts').length > 0
			h4 Layout(s)
			ul.layouts
				for layout in codex.get('pageLayouts')
					li
						ul
							li #{layout.linesMin} to #{layout.linesMax} lines of #{layout.lineHeight} mm height
							li #{layout.foliaCount} pages: #{layout.pages}
							li Text block size: #{layout.textWidthMin} - #{layout.textWidthMax} x #{layout.textHeightMin} - #{layout.textHeightMax}


		h3 Script
		- var script = codex.get('script');
		ul.script
			+labelValue("Type", script.types)
			+labelValue("Characteristics", script.characteristics)
			+labelValue("Hand count", script.handsCount)
			+labelValue("Scribe", script.scribeRemarks)

		if codex.get('URLs').length > 0
			h3 URL(s)
			ul.urls
				for url in codex.get('URLs')
					li
						a(href=url, data-bypass, target="_blank")= url

		if codex.get('bibliographies').length > 0
			h3 Bibliographies
			ul.bibliographies
				for bibliopgraphy in codex.get('bibliographies')
					li= bibliopgraphy


	.tab.textual-units
		ol
			for textUnit in codex.get('textUnits')
				- var authors = textUnit.text.authors.map(function (author) { return author.person.name; }).join(", ");
				
				li
					ul
						+labelValueOrDash("Title", textUnit.text.title)
						+labelValueOrDash("Title in codex", textUnit.titleincodex)
						+labelValueOrDash("Incipit", textUnit.incipit)
						+labelValueOrDash("Explicit", textUnit.explicit)
						+labelValueOrDash("Page range", textUnit.pages)
						+labelValueOrDash("Author(s)", authors)
						+labelValueOrDash("Period", textUnit.text.period)
						+labelValueOrDash("Genre", textUnit.remarks)
						+labelValueOrDash("State of preservation", textUnit.stateOfPreservation)

	.tab.marginal-units
		ol
			for marginUnit, index in codex.get('marginUnits')
				li
					ul
						+labelValueOrDash("Identifier", marginUnit.identifier)
						+labelValueOrDash("Typology", marginUnit.typology)
						+labelValueOrDash("Typology", marginUnit.typologyRemarks)
						li
							label Specific phenomena
							if marginUnit.specificPhenomena.length > 0
								ul.specific-phenomena
									for sp in marginUnit.specificPhenomena
										li
											ul
												+labelValueOrDash("Quantification", sp.quantification)
												+labelValueOrDash("Remarks", sp.remarks)
												+labelValueOrDash("Type", sp.type)
							else
								span -
						+labelValueOrDash("Localization", marginUnit.localization)
						+labelValueOrDash("Relative", marginUnit.relativeDate)
						+labelValueOrDash("Hands", marginUnit.hands)
						+labelValueOrDash("General", marginUnit.generalObservations)
						+labelValueOrDash("Scripts", marginUnit.scripts)
						+labelValueOrDash("Annotators", marginUnit.annotators)
						+labelValueOrDash("Languages", marginUnit.languages)

	.tab.raw
		pre= JSON.stringify(codex.attributes, null, 4)

aside
	img(src=src)